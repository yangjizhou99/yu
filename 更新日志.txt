[2025-08-13] S6.2B-fix：确保贴图入库与刷新后自动回填
- **核心修复**：在创建自定义鱼 (`onCreate`) 和从预设创建鱼 (`addFishFromDef`) 时，强制先将贴图 `dataUrl` 上传到 Firestore 的 `textures` 集合中，再创建 `ponds` 集合中的鱼对象。这确保了 `textureId` 对应的贴图数据一定存在于云端。
- **异步与即时保存**：将相关函数改造为 `async`，并使用 `await saveCloudNow()` 立即将变更写入云端，避免了因延迟写入导致的状态不一致，尤其是在刷新或多端同步时。
- **优化回填逻辑**：改进了 `resolveTexturesForFish` 函数，使用 `Promise.all` 批量获取缺失的贴图，提高了启动和数据回流时的恢复效率。
- **健壮性提升**：在贴图上传和回填逻辑中加入了更明确的日志（`console.log` 和 `console.warn`），便于追踪问题。

[2025-08-13] 云端同步与贴图持久化 (S6.2C)
- 启动时以云端数据为准，修复了旧客户端覆盖新数据的问题。
- 本地持久化版本号（docRev），确保多端同步的正确性。
- 关键操作（如增删鱼、清空池塘）会立即触发云端保存，保证用户意图的及时性。
- 启动或从云端同步后，会自动补全贴图鱼的纹理（textureDataUrl），解决了刷新后自定义图案丢失的问题。
- 更新了Firestore安全规则，确保认证用户才能写入。

[2025-08-13] 纹理存储迁移 (S6.2B)
- 将纹理存储从Storage迁移到Firestore
- 新增纹理哈希和缓存机制
- 更新Firestore安全规则
- 优化跨设备纹理同步
