[2025-08-13] S6.2B-fix-5：完成对所有云端数据的深度清洗
- **问题定位**：经过最终排查，确认 `toCloudPayload` 函数在处理 `food` 数组时未进行白名单筛选，是 `undefined` 错误的最后来源。
- **核心修复**：
    1.  在 `toCloudPayload` 函数中，对 `foodRef.current` 数组进行 `map` 操作，确保 `food` 对象也像 `fish` 对象一样，只包含明确定义的、Firestore 兼容的字段。
    2.  在 `firebase.ts` 的 `saveCloud` 函数中，为 `setDoc` 添加 `{ merge: true }` 选项，增强写入操作的健壮性。
- **效果**：此修复补全了数据清洗的最后环节，确保了整个发送到 Firestore 的 `CloudSave` 对象都是完全干净的，从根本上杜绝了 `Unsupported field value: undefined` 错误。

[2025-08-13] S6.2B-fix-4：修复 Firestore 不支持 undefined 字段值的问题
- **问题定位**：发现 `saveCloudNow failed … Unsupported field value: undefined` 错误，原因是将带有 `undefined` 字段的鱼对象写入了 Firestore。
- **核心修复**：
    1.  **数据清洗**：添加了 `cleanForFirestore` 工具函数，用于递归移除对象中的 `undefined` 字段。
    2.  **白名单上传**：重构了 `toCloudPayload` 函数，采用白名单模式显式指定要上传的字段，并使用 `?? null` 将所有可能为空的字段转换为 `null`。
    3.  **类型统一**：修改了 `Fish` 接口，将所有可选字段的类型从 `T | undefined` 统一为 `T | null`，解决了因此产生的 TypeScript 类型错误。
    4.  **双重保障**：在 `firebase.ts` 的 `saveCloud` 函数中也加入了数据清洗步骤，作为最后一道防线。
- **效果**：此修复确保了所有写入 Firestore 的数据都符合其规范，彻底解决了云端保存失败的问题。

[2025-08-13] S6.2B-fix-3：修复 Firestore 权限问题与异步时序
- **问题定位**：通过日志发现 `[texture] store fail: FirebaseError: Missing or insufficient permissions.` 错误，根本原因是尝试写入 Firestore 时，用户的匿名登录尚未完成。
- **核心修复**：在所有创建带贴图的鱼的函数入口（`addFishFromDef`, `FishDesigner/onCreate`, `DetailEditor/onSave`）中，强制在执行 `putTextureIfAbsent` 之前调用并 `await ensureAnonAuth()`。
- **效果**：此项修复确保了所有对 `textures` 集合的写操作都是在已认证（匿名）的状态下发出的，从而解决了权限不足的问题，保证了贴图数据能够成功存入云端。

[2025-08-13] S6.2B-fix-2：补全“创建新鱼形”流程的贴图持久化
- **问题定位**：发现通过“创建新鱼形” -> “绘制细节” (`DetailEditor`) 创建的鱼，其贴图没有被上传到 Firestore，导致刷新后图案丢失。
- **核心修复**：为 `DetailEditor` 的 `onSave` 回调添加了与 `FishDesigner` 相同的贴图处理逻辑。现在，在保存用新轮廓绘制的鱼时，会先将其贴图 `dataUrl` 上传到 `textures` 集合，生成 `textureId`，然后才将带有 `textureId` 的鱼对象存入 `ponds` 集合。
- **类型安全**：增加了空值检查，确保只有在成功生成贴图预览 (`previewPng`) 的情况下才执行上传和保存，修复了相关的 TypeScript 类型错误。

[2025-08-13] S6.2B-fix：确保贴图入库与刷新后自动回填
- **核心修复**：在创建自定义鱼 (`onCreate`) 和从预设创建鱼 (`addFishFromDef`) 时，强制先将贴图 `dataUrl` 上传到 Firestore 的 `textures` 集合中，再创建 `ponds` 集合中的鱼对象。这确保了 `textureId` 对应的贴图数据一定存在于云端。
- **异步与即时保存**：将相关函数改造为 `async`，并使用 `await saveCloudNow()` 立即将变更写入云端，避免了因延迟写入导致的状态不一致，尤其是在刷新或多端同步时。
- **优化回填逻辑**：改进了 `resolveTexturesForFish` 函数，使用 `Promise.all` 批量获取缺失的贴图，提高了启动和数据回流时的恢复效率。
- **健壮性提升**：在贴图上传和回填逻辑中加入了更明确的日志（`console.log` 和 `console.warn`），便于追踪问题。

[2025-08-13] 云端同步与贴图持久化 (S6.2C)
- 启动时以云端数据为准，修复了旧客户端覆盖新数据的问题。
- 本地持久化版本号（docRev），确保多端同步的正确性。
- 关键操作（如增删鱼、清空池塘）会立即触发云端保存，保证用户意图的及时性。
- 启动或从云端同步后，会自动补全贴图鱼的纹理（textureDataUrl），解决了刷新后自定义图案丢失的问题。
- 更新了Firestore安全规则，确保认证用户才能写入。

[2025-08-13] 纹理存储迁移 (S6.2B)
- 将纹理存储从Storage迁移到Firestore
- 新增纹理哈希和缓存机制
- 更新Firestore安全规则
- 优化跨设备纹理同步
