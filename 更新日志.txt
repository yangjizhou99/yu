# 更新日志

## [2025-08-13 03:56:15] 多种鱼形选择功能 (v3.3)

### 新增功能
1. **四种鱼形选择**：
   - 流线型(默认)：尖头、饱腹、细尾柄
   - 神仙鱼：高背三角鳍，腹部鼓、尾柄细
   - 旗鱼/剑鱼：细长体 + 长吻"剑"，腹部较平直
   - 长尾型：斗鱼/金鱼风，圆润身 + 尾柄短

2. **自定义面板升级**：
   - 新增鱼形选择按钮组
   - 切换鱼形时自动清空当前绘制
   - 绘制区域轮廓实时更新为所选鱼形

3. **存档兼容**：
   - 为旧存档鱼自动设置默认形状(流线型)
   - 新增shape字段保存鱼形信息

### 实现方法
- 新增FishShape类型定义四种鱼形
- 添加beginFishBodyPath_byShape和beginFishBodyPathAbs_byShape分发函数
- 为每种鱼形实现独立的路径绘制函数
- 修改FishDesigner组件：
  - 添加形状选择状态
  - 更新轮廓绘制逻辑
  - 修改onCreate接口添加shape参数
- 更新渲染循环使用f.shape选择路径函数

### 验证方式
1. 打开自定义面板，测试四种鱼形切换
2. 验证绘制区域轮廓与所选鱼形匹配
3. 创建不同形状的鱼，观察游动效果
4. 刷新页面验证鱼形保存正确
5. 加载旧存档验证兼容性

### 技术细节
- 类型定义：
  ```ts
  type FishShape = "streamlined" | "angelfish" | "swordfish" | "longtail";
  interface Fish {
    // ...
    shape?: FishShape;
  }
  ```
- 路径分发函数：
  ```ts
  function beginFishBodyPath_byShape(ctx: CanvasRenderingContext2D, shape: FishShape, L: number, H: number) {
    if (shape === "angelfish") return beginFishBodyPath_angelfish(ctx, L, H);
    // ...其他形状判断
    return beginFishBodyPath_streamlined(ctx, L, H);
  }
  ```
- 神仙鱼路径控制点示例：
  ```ts
  ctx.moveTo(+L*0.45, 0);
  ctx.bezierCurveTo(+L*0.30, -H*0.05, +L*0.05, -H*0.65, -L*0.15, -H*0.50);
  // ...其他控制点
  ```

## [2025-08-13 03:37:56] 鱼体轮廓升级 (v3.2)

### 新增功能
1. **更逼真的鱼体轮廓**：
   - 使用贝塞尔曲线绘制流线型鱼体（尖头、饱满腹部、细尾柄）
   - 移除旧版"椭圆+三角"的简单造型
   - 保留尾巴单独抖动动画

2. **自定义绘制框匹配鱼形**：
   - 绘制面板的绘制区域从椭圆改为与鱼体轮廓一致的形状
   - 玩家绘制的纹理更贴合鱼体实际形状
   - 超出轮廓的笔迹被自动裁剪

### 实现方法
- 新增 `beginFishBodyPath()` 和 `drawFishBodyPathAbs()` 两个工具函数
- 替换鱼体绘制逻辑，从 `ellipse()` 改为贝塞尔曲线路径
- 删除头部三角绘制代码（新轮廓已包含头部造型）
- 修改 `FishDesigner` 组件：
  - 将椭圆参数改为鱼形框参数
  - 替换轮廓绘制为鱼形路径
  - 更新裁剪函数为 `clipToFish()`
  - 修改提示文字为"只允许在鱼体轮廓内绘制"

### 验证方式
1. 观察鱼体是否变为连贯的流线型
2. 验证尾巴仍有轻微摆动
3. 检查眼睛位置是否正常
4. 测试自定义绘制面板：
   - 绘制区域是否与鱼体轮廓一致
   - 超出区域的笔迹是否被正确裁剪
5. 加载旧存档验证兼容性（旧椭圆贴图应能正确显示）

### 技术细节
- 鱼体路径控制点：
  ```ts
  ctx.moveTo( +L * 0.50, 0);
  ctx.bezierCurveTo( +L * 0.42, -H * 0.10, +L * 0.20, -H * 0.42, -L * 0.30, -H * 0.24);
  ctx.bezierCurveTo( -L * 0.46, -H * 0.20, -L * 0.46,  +H * 0.20, -L * 0.30,  +H * 0.24);
  ctx.bezierCurveTo( +L * 0.20,  +H * 0.42, +L * 0.42,  +H * 0.10, +L * 0.50, 0);
  ```
- 纹理绘制优化：
  - 使用 `bodyLen * 0.98` 和 `bodyH * 0.98` 作为目标尺寸
  - 等比缩放避免变形

## [2025-08-13 03:23:53] 海洋背景 + 体型调速 (v3.1)

### 新增功能
1. **海洋风格背景**：
   - 深海渐变（浅青→深蓝→海底）
   - 顶部光斑效果（随时间缓慢下移）
   - 底部沙地 + 沙丘起伏阴影
2. **体型调速系统**：
   - 小鱼更快（size < 1.0 时速度×1.2）
   - 大鱼更慢（size > 1.5 时速度×0.7）
   - 平滑过渡（1.35 - 0.26 * size）

### 实现方法
- 新增 `drawOceanBackground()` 函数集中绘制海洋效果
- 新增 `speedMultiplier()` 函数计算体型速度系数
- 修改鱼速度计算逻辑使用 `effSpeed = speed * speedMultiplier(size)`
- 移除旧的水纹背景绘制代码

### 验证方式
1. 观察背景是否变为海洋风格
2. 测试小鱼是否比大鱼移动更快
3. 验证相机缩放/拖拽功能正常
4. 检查投喂、存档等原有功能是否正常

### 技术细节
- 背景颜色：
  - 顶部: #0e7490
  - 中部: #0a6aa1 
  - 底部: #06304f
- 沙地颜色: #f1e2a9 → #d8c17a
- 速度计算公式：
  ```ts
  function speedMultiplier(size: number) {
    const m = 1.35 - 0.26 * size;
    return clamp(m, 0.70, 1.20);
  }
  ```

## [2025-08-13 03:07:15] 相机系统升级 + 巨型鱼塘 + 成长平衡 (v3.0)

### 新增功能
1. **相机系统**：
   - 支持滚轮缩放（围绕鼠标点缩放）
   - 支持空格/右键/中键拖拽平移
   - 新增视角控制按钮：缩小/放大/重置/全景适配
   - 相机边界钳制，防止移出世界边界

2. **巨型鱼塘**：
   - 世界尺寸扩大至4096×2304（16:9比例）
   - 鱼在世界边界内游动不穿模
   - 投喂坐标基于世界坐标正确计算

3. **成长平衡调整**：
   - 降低成长速度（长期平均≈0.684%/颗）
   - 新增体型上限（SIZE_SCALE_MAX = 2.5）
   - 加入递减收益公式：effectiveGrow = baseGrow / (1 + (sizeScale-1)*0.8
   - 新饲料概率表：
     - 普通：75% → +0.4%
     - 罕见：22% → +1.2% 
     - 稀有：3% → +4%

4. **存档升级**：
   - 升级到v3存档格式，兼容v1/v2
   - 新增相机状态保存

### 实现方法
- 使用Camera对象管理{x,y,scale}状态
- 实现screenToWorld/worldToScreen坐标转换
- 使用setTransform实现世界坐标渲染
- 新增ensureCamInBounds边界检查
- 修改成长计算公式加入递减收益

### 验证方式
1. 滚轮缩放测试（围绕鼠标点）
2. 空格/右键拖拽测试
3. 点击投喂位置验证
4. "全景适配"按钮测试
5. 长期喂养观察成长速度
6. 测试体型上限是否生效
7. 刷新验证状态恢复

### 技术细节
- 世界尺寸：WORLD_W=4096, WORLD_H=2304
- 相机参数：
  ```ts
  interface Camera {
    x: number; // 世界坐标左上角x
    y: number; // 世界坐标左上角y 
    scale: number; // 缩放系数
  }
  ```
- 新存档键名：fish-pond-save-v3
- 成长计算公式：
  ```ts
  const effectiveGrow = fd.growPct / (1 + (f.sizeScale - 1) * 0.8);
  f.sizeScale = Math.min(SIZE_SCALE_MAX, f.sizeScale * (1 + effectiveGrow));
  ```

## [2025-08-13 02:36:28] 新增自定义新鱼功能

### 新增功能
1. 新增"🎨 自定义新鱼"按钮，弹出绘制框
2. 实现轮廓内绘制限制（超出无效）
3. 支持填写用户名字与宠物鱼名字
4. 自定义外观作为鱼体贴图显示
5. 使用localStorage v3持久化存储，兼容旧版本

## [2025-08-13 01:32:34] 本地存档功能升级

### 新增功能
1. 实现了鱼塘游戏的本地存档功能，使用 localStorage 保存游戏状态
2. 添加了存档节流机制（800ms合并保存一次），避免频繁写入
3. 在页面隐藏/关闭时强制保存一次（通过 visibilitychange/beforeunload 事件）
4. 增加了存档版本控制（当前版本 v1）
5. 添加了"清空存档"按钮功能

### 实现方法
- 使用脏标记(dirtyRef)和定时器(saveTimerRef)实现节流保存
- 存档数据结构包含：版本号、下一个ID、鱼群数据、饲料数据、保存时间
- 游戏启动时自动加载存档，刷新页面后恢复状态
- 清空存档功能会重置游戏状态并删除本地存储

### 验证方式
1. 运行 `npm run dev` 启动游戏
2. 添加几条鱼并投喂饲料
3. 刷新页面验证鱼群数量、位置、体型和剩余饲料是否恢复
4. 点击"清空存档"按钮后刷新页面，验证是否重置成功
5. 长时间运行游戏验证性能（节流机制确保不卡顿）

### 技术细节
- 存档键名：fish-pond-save-v1
- 数据结构：
  ```ts
  type SaveData = {
    version: 1;
    nextId: number;
    fish: Fish[];
    food: Food[];
    savedAt: string;
  };
  ```
- 节流机制：800ms内合并多次保存请求
- 强制保存场景：页面隐藏或关闭时

## [2025-08-13 02:00:32] 多样化饲料系统升级 (v2.0)

### 新增功能
1. 实现了多样化饲料系统，包含三种稀有度的饲料：
   - **普通饲料**：棕色小颗粒，+1% 体型增长，70% 概率
   - **罕见饲料**：蓝绿色带荧光外圈，+3% 体型增长，25% 概率  
   - **稀有饲料**：金色星形带光晕，+11% 体型增长，5% 概率
2. 概率设计确保长期平均每颗饲料带来 +2% 体型增长
3. 升级存档系统到 v2 版本，支持饲料稀有度数据保存
4. 实现 v1 到 v2 存档自动迁移功能
5. 新增不同饲料的视觉效果：动态光晕、脉冲效果、星形绘制

### 实现方法
- 使用概率算法 `pickFoodVariant()` 按权重随机生成饲料类型
- 期望增幅计算：0.70×0.01 + 0.25×0.03 + 0.05×0.11 = 0.0200 (2%)
- 新增 `drawFood()` 函数处理不同稀有度饲料的绘制
- 实现 `drawStar()` 函数绘制稀有饲料的星形外观
- 存档版本升级：fish-pond-save-v1 → fish-pond-save-v2
- 兼容性处理：自动将旧版饲料迁移为普通饲料 (+1%)

### 验证方式
1. 运行 `npm run dev` 启动游戏
2. 点击水面投喂，观察不同外观的饲料生成
3. 观察鱼吃掉不同饲料后的体型变化差异
4. 刷新页面验证饲料稀有度数据是否正确保存和恢复
5. 测试旧版存档的自动迁移功能

### 技术细节
- 新存档键名：fish-pond-save-v2
- 饲料数据结构扩展：
  ```ts
  interface Food {
    id: number;
    x: number;
    y: number;
    r: number;
    kind: FoodKind; // "common" | "uncommon" | "rare"
    growPct: number; // 增幅百分比
  }
  ```
- 概率配置：
  ```ts
  const FOOD_VARIANTS = [
    { kind: "common", prob: 0.70, growPct: 0.01, radius: 5 },
    { kind: "uncommon", prob: 0.25, growPct: 0.03, radius: 6 },
    { kind: "rare", prob: 0.05, growPct: 0.11, radius: 7 },
  ];
  ```
- 视觉效果：Canvas 2D 动态绘制，包含渐变、光晕、旋转动画
- 版本迁移：自动检测并转换 v1 存档格式到 v2
